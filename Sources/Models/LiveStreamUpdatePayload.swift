//
// LiveStreamUpdatePayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct LiveStreamUpdatePayload: Codable, Hashable {

    /** The name you want to use for your live stream. */
    public var name: String?
    /** Whether your video can be viewed by everyone, or requires authentication to see it. A setting of false will require a unique token for each view. Learn more about the Private Video feature [here](https://docs.api.video/delivery/video-privacy-access-management). */
    public var _public: Bool?
    /** The unique ID for the player associated with a live stream that you want to update. */
    public var playerId: String?
    /** Use this parameter to add, edit, or remove `RTMPS` or `RTMP` services where you want to restream a live stream. The list can only contain up to 5 destinations. This operation updates all restream destinations in the same request. If you do not want to modify an existing restream destination, you need to include it in your request, otherwise it is removed. */
    public var restreams: [RestreamsRequestObject]?

    public init(name: String? = nil, _public: Bool? = nil, playerId: String? = nil, restreams: [RestreamsRequestObject]? = nil) {
        self.name = name
        self._public = _public
        self.playerId = playerId
        self.restreams = restreams
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case _public = "public"
        case playerId
        case restreams
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(_public, forKey: ._public)
        try container.encodeIfPresent(playerId, forKey: .playerId)
        try container.encodeIfPresent(restreams, forKey: .restreams)
    }
}

