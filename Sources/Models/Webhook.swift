//
// Webhook.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Webhook: Codable, Hashable {

    /** A unique identifier of the webhook you subscribed to. */
    public var webhookId: String?
    /** The time and date when you created this webhook subscription, in ATOM UTC format. */
    public var createdAt: Date?
    /** A list of events that you subscribed to. When these events occur, the API triggers a webhook call to the URL you provided. */
    public var events: [String]?
    /** The URL where the API sends the webhook. */
    public var url: String?
    /** A secret key for the webhook you subscribed to. You can use it to verify the origin of the webhook call that you receive. */
    public var signatureSecret: String?

    public init(webhookId: String? = nil, createdAt: Date? = nil, events: [String]? = nil, url: String? = nil, signatureSecret: String? = nil) {
        self.webhookId = webhookId
        self.createdAt = createdAt
        self.events = events
        self.url = url
        self.signatureSecret = signatureSecret
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case webhookId
        case createdAt
        case events
        case url
        case signatureSecret
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(webhookId, forKey: .webhookId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(events, forKey: .events)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(signatureSecret, forKey: .signatureSecret)
    }
}

